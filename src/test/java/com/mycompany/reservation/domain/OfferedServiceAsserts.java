package com.mycompany.reservation.domain;

import static com.mycompany.reservation.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OfferedServiceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertOfferedServiceAllPropertiesEquals(OfferedService expected, OfferedService actual) {
        assertOfferedServiceAutoGeneratedPropertiesEquals(expected, actual);
        assertOfferedServiceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertOfferedServiceAllUpdatablePropertiesEquals(OfferedService expected, OfferedService actual) {
        assertOfferedServiceUpdatableFieldsEquals(expected, actual);
        assertOfferedServiceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertOfferedServiceAutoGeneratedPropertiesEquals(OfferedService expected, OfferedService actual) {
        assertThat(actual)
            .as("Verify OfferedService auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertOfferedServiceUpdatableFieldsEquals(OfferedService expected, OfferedService actual) {
        assertThat(actual)
            .as("Verify OfferedService relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getDuration()).as("check duration").isEqualTo(expected.getDuration()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertOfferedServiceUpdatableRelationshipsEquals(OfferedService expected, OfferedService actual) {
        assertThat(actual)
            .as("Verify OfferedService relationships")
            .satisfies(a -> assertThat(a.getBusiness()).as("check business").isEqualTo(expected.getBusiness()));
    }
}
