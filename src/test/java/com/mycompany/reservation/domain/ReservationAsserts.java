package com.mycompany.reservation.domain;

import static com.mycompany.reservation.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ReservationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertReservationAllPropertiesEquals(Reservation expected, Reservation actual) {
        assertReservationAutoGeneratedPropertiesEquals(expected, actual);
        assertReservationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertReservationAllUpdatablePropertiesEquals(Reservation expected, Reservation actual) {
        assertReservationUpdatableFieldsEquals(expected, actual);
        assertReservationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertReservationAutoGeneratedPropertiesEquals(Reservation expected, Reservation actual) {
        assertThat(actual)
            .as("Verify Reservation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertReservationUpdatableFieldsEquals(Reservation expected, Reservation actual) {
        assertThat(actual)
            .as("Verify Reservation relevant properties")
            .satisfies(a -> assertThat(a.getDate()).as("check date").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getDate())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual   the actual entity
     */
    public static void assertReservationUpdatableRelationshipsEquals(Reservation expected, Reservation actual) {
        assertThat(actual)
            .as("Verify Reservation relationships")
            .satisfies(a -> assertThat(a.getService()).as("check service").isEqualTo(expected.getService()))
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()))
            .satisfies(a -> assertThat(a.getBusiness()).as("check business").isEqualTo(expected.getBusiness()));
    }
}
