package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AppointmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentAllPropertiesEquals(Appointment expected, Appointment actual) {
        assertAppointmentAutoGeneratedPropertiesEquals(expected, actual);
        assertAppointmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentAllUpdatablePropertiesEquals(Appointment expected, Appointment actual) {
        assertAppointmentUpdatableFieldsEquals(expected, actual);
        assertAppointmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentAutoGeneratedPropertiesEquals(Appointment expected, Appointment actual) {
        assertThat(actual)
            .as("Verify Appointment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentUpdatableFieldsEquals(Appointment expected, Appointment actual) {
        assertThat(actual)
            .as("Verify Appointment relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a ->
                assertThat(a.getAppointmentDate())
                    .as("check appointmentDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getAppointmentDate())
            )
            .satisfies(a -> assertThat(a.getDuration()).as("check duration").isEqualTo(expected.getDuration()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentUpdatableRelationshipsEquals(Appointment expected, Appointment actual) {
        assertThat(actual)
            .as("Verify Appointment relationships")
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()));
    }
}
